on:
  schedule:
    - cron: '0 3 * * *' # run at 3 AM UTC

name: Nightly Release

jobs:
  nightly_release:
    name: Create nightly release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Install hub
        uses: geertvdc/setup-hub@master

      - name: Get version
        id: version
        run: |
          export VERSION=`cat ./jormungandr/Cargo.toml | grep "version" | head -n 1 | awk '{print $3}' | cut -d "\"" -f 2 `
          echo ::set-output name=version::$VERSION

      - name: Delete nightly with hub
        env:
          GITHUB_USER: ${{ secrets.GITHUB_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release delete nightly

      - name: Create Nightly
        id: create_nightly
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: nightly
          release_name: ${{ steps.version.outputs.version }}
          draft: false
          prerelease: true

  release_assets:
    name: Release assets
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - {os: ubuntu-latest, toolchain: stable, target: x86_64-unknown-linux-gnu, target_cpu: generic, cross: false}
          - {os: ubuntu-latest, toolchain: stable, target: x86_64-unknown-linux-gnu, target_cpu: broadwell, cross: false}
          - {os: ubuntu-latest, toolchain: stable, target: aarch64-unknown-linux-gnu, target_cpu: generic, cross: true}
          - {os: ubuntu-latest, toolchain: stable, target: arm-unknown-linux-gnueabi, target_cpu: generic, cross: true}
          - {os: ubuntu-latest, toolchain: stable, target: armv7-unknown-linux-gnueabihf, target_cpu: generic, cross: true}
          - {os: ubuntu-latest, toolchain: stable,  target: x86_64-unknown-linux-musl, target_cpu: generic, cross: true}
          - {os: ubuntu-latest, toolchain: stable,  target: x86_64-unknown-linux-musl, target_cpu: broadwell, cross: true}
          - {os: ubuntu-latest, toolchain: stable, target: aarch64-linux-android, target_cpu: generic, cross: true}
          # mips and powerpc are not compitble with ring v0.16.10, so they are disabled for now
#          - {os: ubuntu-latest, target: mips64el-unknown-linux-gnuabi64, cross: true}
#          - {os: ubuntu-latest, target: powerpc64le-unknown-linux-gnu, cross: true}
          # Macos
          - {os: macos-latest, toolchain: stable, target: x86_64-apple-darwin, target_cpu: generic, cross: false}
          - {os: macos-latest, toolchain: stable, target: x86_64-apple-darwin, target_cpu: broadwell, cross: false}
          # Windows
          - {os: windows-latest, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu, target_cpu: generic, cross: false}
          - {os: windows-latest, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc, target_cpu: generic, cross: false}
          - {os: windows-latest, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu, target_cpu: broadwell, cross: false}
          - {os: windows-latest, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc, target_cpu: broadwell, cross: false}
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}
          override: true
          default: true

      - name: Downgrade cross
        uses: actions-rs/cargo@v1
        if: ${{ matrix.config.cross }}
        with:
          command: install
          args: --version 0.1.16 cross

      - name: Get current date
        run: |
          export DATE=`date +'%Y%m%d'`;
          echo ::set-env name=DATE::$DATE
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Build jormungandr
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: rustc
          args: --release --target ${{ matrix.config.target }} -p jormungandr --bin jormungandr -- -C target-cpu=${{ matrix.config.target_cpu }} -C lto

      - name: Build jcli
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: rustc
          args: --release --target ${{ matrix.config.target }} -p jcli --bin jcli -- -C target-cpu=${{ matrix.config.target_cpu }} -C lto


      - name: Get version if unix
        if: matrix.config.os != 'windows-latest'
        run: |
          export VERSION=`./target/${{ matrix.config.target }}/release/jormungandr --version | awk '{print $2}'`
          echo ::set-env name=VERSION::$VERSION

      - name: Pack binaries if unix
        if: matrix.config.os != 'windows-latest'
        run: tar -C ./target/${{ matrix.config.target }}/release -czvf jormungandr-${{ env.VERSION }}.${{ env.DATE }}-${{ matrix.config.target }}-${{ matrix.config.target_cpu }}.tar.gz jormungandr jcli

      - name: Get version if windows
        if: matrix.config.os == 'windows-latest'
        run: |
          $version=./target/${{ matrix.config.target }}/release/jormungandr.exe --version;
          $version=$version.trim("jormungandr ");
          echo "::set-env name=VERSION::$version";

      - name: Pack binaries if windows
        if: matrix.config.os == 'windows-latest'
        run: compress-archive ./target/${{ matrix.config.target }}/release/jormungandr.exe, ./target/${{ matrix.config.target }}/release/jcli.exe jormungandr-${{ env.VERSION }}.${{ env.DATE }}-${{ matrix.config.target }}-${{ matrix.config.target_cpu }}.zip

      - name: Upload binaries to nightly release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jormungandr-${{ env.VERSION }}.${{ env.DATE }}-${{ matrix.config.target }}-${{ matrix.config.target_cpu }}.*
          asset_name: jormungandr-${{ env.VERSION }}.${{ env.DATE }}-${{ matrix.config.target }}-${{ matrix.config.target_cpu }}
          tag: nightly
          file_glob: true
          overwrite: true